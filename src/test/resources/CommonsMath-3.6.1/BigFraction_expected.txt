org.apache.commons.math3.fraction.BigFraction(java.math.BigInteger, java.math.BigInteger) throws org.apache.commons.math3.exception.ZeroException if the denominator is zero. ==> [args[1]==(org.apache.commons.math3.fraction.BigFraction.ZERO)]
org.apache.commons.math3.fraction.BigFraction(java.math.BigInteger, java.math.BigInteger) throws org.apache.commons.math3.exception.NullArgumentException if either of the arguments is null ==> [args[0]==null||args[1]==null]
org.apache.commons.math3.fraction.BigFraction(double) throws org.apache.commons.math3.exception.MathIllegalArgumentException if value is NaN or infinite ==> [Double.isNaN(args[0])||Double.isInfinite(args[0])]
org.apache.commons.math3.fraction.BigFraction(double, double, int) throws org.apache.commons.math3.fraction.FractionConversionException if the continued fraction failed to converge. ==> []
org.apache.commons.math3.fraction.BigFraction(double, double, int, int) throws org.apache.commons.math3.fraction.FractionConversionException if the continued fraction failed to converge. ==> []
org.apache.commons.math3.fraction.BigFraction(double, int) throws org.apache.commons.math3.fraction.FractionConversionException if the continued fraction failed to converge. ==> []
org.apache.commons.math3.fraction.BigFraction.getReducedFraction(int, int) throws java.lang.ArithmeticException if the denominator is zero. ==> [args[1]==0]
org.apache.commons.math3.fraction.BigFraction.add(java.math.BigInteger) throws org.apache.commons.math3.exception.NullArgumentException if the BigInteger is null. ==> [args[0]==null]
org.apache.commons.math3.fraction.BigFraction.add(org.apache.commons.math3.fraction.BigFraction) throws org.apache.commons.math3.exception.NullArgumentException if the BigFraction is null. ==> [args[0]==null]
org.apache.commons.math3.fraction.BigFraction.add(org.apache.commons.math3.fraction.BigFraction) throws org.apache.commons.math3.exception.NullArgumentException if a is null. ==> [args[0]==null]
org.apache.commons.math3.fraction.BigFraction.bigDecimalValue() throws java.lang.ArithmeticException if the exact quotient does not have a terminating decimal expansion. ==> []
org.apache.commons.math3.fraction.BigFraction.bigDecimalValue(int) throws java.lang.IllegalArgumentException if roundingMode does not represent a valid rounding mode. ==> []
org.apache.commons.math3.fraction.BigFraction.divide(java.math.BigInteger) throws org.apache.commons.math3.exception.NullArgumentException if the BigInteger is null ==> [args[0]==null]
org.apache.commons.math3.fraction.BigFraction.divide(java.math.BigInteger) throws org.apache.commons.math3.exception.MathArithmeticException if the fraction to divide by is zero ==> [args[0]==(org.apache.commons.math3.fraction.BigFraction.ZERO)]
org.apache.commons.math3.fraction.BigFraction.divide(int) throws org.apache.commons.math3.exception.MathArithmeticException if the fraction to divide by is zero ==> [args[0]==0]
org.apache.commons.math3.fraction.BigFraction.divide(long) throws org.apache.commons.math3.exception.MathArithmeticException if the fraction to divide by is zero ==> [args[0]==0]
org.apache.commons.math3.fraction.BigFraction.divide(org.apache.commons.math3.fraction.BigFraction) throws org.apache.commons.math3.exception.NullArgumentException if the fraction is null. ==> [args[0]==null]
org.apache.commons.math3.fraction.BigFraction.divide(org.apache.commons.math3.fraction.BigFraction) throws org.apache.commons.math3.exception.MathArithmeticException if the fraction to divide by is zero ==> [args[0]==(org.apache.commons.math3.fraction.BigFraction.ZERO)]
org.apache.commons.math3.fraction.BigFraction.divide(org.apache.commons.math3.fraction.BigFraction) throws org.apache.commons.math3.exception.NullArgumentException if a is null. ==> [args[0]==null]
org.apache.commons.math3.fraction.BigFraction.divide(org.apache.commons.math3.fraction.BigFraction) throws org.apache.commons.math3.exception.MathArithmeticException if a is zero ==> [args[0].equals(org.apache.commons.math3.fraction.BigFraction.ZERO)]
org.apache.commons.math3.fraction.BigFraction.multiply(java.math.BigInteger) throws org.apache.commons.math3.exception.NullArgumentException if bg is null. ==> [args[0]==null]
org.apache.commons.math3.fraction.BigFraction.multiply(org.apache.commons.math3.fraction.BigFraction) throws org.apache.commons.math3.exception.NullArgumentException if fraction is null. ==> [args[0]==null]
org.apache.commons.math3.fraction.BigFraction.multiply(org.apache.commons.math3.fraction.BigFraction) throws org.apache.commons.math3.exception.NullArgumentException if a is null. ==> [target.abs()==null]
org.apache.commons.math3.fraction.BigFraction.reciprocal() throws org.apache.commons.math3.exception.MathArithmeticException if this is zero ==> [target==(org.apache.commons.math3.fraction.BigFraction.ZERO)]
org.apache.commons.math3.fraction.BigFraction.subtract(java.math.BigInteger) throws org.apache.commons.math3.exception.NullArgumentException if the BigInteger is null. ==> [args[0]==null]
org.apache.commons.math3.fraction.BigFraction.subtract(org.apache.commons.math3.fraction.BigFraction) throws org.apache.commons.math3.exception.NullArgumentException if the fraction is null. ==> [args[0]==null]
org.apache.commons.math3.fraction.BigFraction.subtract(org.apache.commons.math3.fraction.BigFraction) throws org.apache.commons.math3.exception.NullArgumentException if a is null. ==> [target.abs()==null]
