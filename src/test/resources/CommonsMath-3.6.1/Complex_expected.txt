org.apache.commons.math3.complex.Complex.add(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException if addend is null. ==> [args[0]==null]
org.apache.commons.math3.complex.Complex.divide(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException if divisor is null. ==> [args[0]==null]
org.apache.commons.math3.complex.Complex.reciprocal() throws org.apache.commons.math3.exception.MathArithmeticException if this is zero ==> [target.abs()==0]
org.apache.commons.math3.complex.Complex.multiply(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException if factor is null. ==> [args[0]==null]
org.apache.commons.math3.complex.Complex.multiply(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException if a is null. ==> [args[0]==null]
org.apache.commons.math3.complex.Complex.subtract(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException if subtrahend is null. ==> [args[0]==null]
org.apache.commons.math3.complex.Complex.subtract(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException if a is null. ==> [args[0]==null]
org.apache.commons.math3.complex.Complex.pow(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException if x is null. ==> [args[0]==null]
org.apache.commons.math3.complex.Complex.nthRoot(int) throws org.apache.commons.math3.exception.NotPositiveException if n <= 0. ==> [args[0]<=0]
