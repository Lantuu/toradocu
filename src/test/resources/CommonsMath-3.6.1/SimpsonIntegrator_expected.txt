org.apache.commons.math3.analysis.integration.SimpsonIntegrator(double, double, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException if minimal number of iterations is not strictly positive ==> [args[2]<=0]
org.apache.commons.math3.analysis.integration.SimpsonIntegrator(double, double, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException if maximal number of iterations is lesser than or equal to the minimal number of iterations ==> [args[3]<=args[2]]
org.apache.commons.math3.analysis.integration.SimpsonIntegrator(double, double, int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException if maximal number of iterations is greater than SIMPSON_MAX_ITERATIONS_COUNT ==> [args[3]>target.SIMPSON_MAX_ITERATIONS_COUNT]
org.apache.commons.math3.analysis.integration.SimpsonIntegrator(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException if minimal number of iterations is not strictly positive ==> [args[0]<=0]
org.apache.commons.math3.analysis.integration.SimpsonIntegrator(int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException if maximal number of iterations is lesser than or equal to the minimal number of iterations ==> [args[1]<=args[0]]
org.apache.commons.math3.analysis.integration.SimpsonIntegrator(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException if maximal number of iterations is greater than SIMPSON_MAX_ITERATIONS_COUNT ==> [args[1]>target.SIMPSON_MAX_ITERATIONS_COUNT]
org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.incrementCount() throws org.apache.commons.math3.exception.MaxCountExceededException if the number of iterations exceeds the allowed maximum number ==> [target.getIterations()+1>target.getMaximalIterationCount()]
org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.computeObjectiveValue(double) throws org.apache.commons.math3.exception.TooManyEvaluationsException if the maximal number of function evaluations is exceeded. ==> []
org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.setup(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double) throws org.apache.commons.math3.exception.NullArgumentException if f is null. ==> [args[1]==null]
org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.setup(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException if min >= max. ==> [args[2]>=args[3]]
org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.integrate(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double) throws org.apache.commons.math3.exception.TooManyEvaluationsException if the maximum number of function evaluations is exceeded ==> []
org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.integrate(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double) throws org.apache.commons.math3.exception.MaxCountExceededException if the maximum iteration count is exceeded or the integrator detects convergence problems otherwise ==> []
org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.integrate(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException if min > max or the endpoints do not satisfy the requirements specified by the integrator ==> [args[3]>args[2]]
org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.integrate(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double) throws org.apache.commons.math3.exception.NullArgumentException if f is null. ==> [args[1]==null]
