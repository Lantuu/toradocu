org.apache.commons.math3.fraction.Fraction(double) throws org.apache.commons.math3.fraction.FractionConversionException if the continued fraction failed to converge. ==> []
org.apache.commons.math3.fraction.Fraction(double, double, int) throws org.apache.commons.math3.fraction.FractionConversionException if the continued fraction failed to converge. ==> []
org.apache.commons.math3.fraction.Fraction(double, int) throws org.apache.commons.math3.fraction.FractionConversionException if the continued fraction failed to converge ==> []
org.apache.commons.math3.fraction.Fraction(int, int) throws org.apache.commons.math3.exception.MathArithmeticException if the denominator is zero ==> [args[1]==0]
org.apache.commons.math3.fraction.Fraction.reciprocal() throws org.apache.commons.math3.exception.MathArithmeticException if this is zero ==> [target==(org.apache.commons.math3.fraction.BigFraction.ZERO)]
org.apache.commons.math3.fraction.Fraction.add(org.apache.commons.math3.fraction.Fraction) throws org.apache.commons.math3.exception.NullArgumentException if the fraction is null ==> [args[0]==null]
org.apache.commons.math3.fraction.Fraction.add(org.apache.commons.math3.fraction.Fraction) throws org.apache.commons.math3.exception.MathArithmeticException if the resulting numerator or denominator exceeds Integer.MAX_VALUE ==> []
org.apache.commons.math3.fraction.Fraction.add(org.apache.commons.math3.fraction.Fraction) throws org.apache.commons.math3.exception.NullArgumentException if a is null. ==> [target.abs()==null]
org.apache.commons.math3.fraction.Fraction.subtract(org.apache.commons.math3.fraction.Fraction) throws org.apache.commons.math3.exception.NullArgumentException if the fraction is null ==> [args[0]==null]
org.apache.commons.math3.fraction.Fraction.subtract(org.apache.commons.math3.fraction.Fraction) throws org.apache.commons.math3.exception.MathArithmeticException if the resulting numerator or denominator cannot be represented in an int. ==> []
org.apache.commons.math3.fraction.Fraction.subtract(org.apache.commons.math3.fraction.Fraction) throws org.apache.commons.math3.exception.NullArgumentException if a is null. ==> [target.abs()==null]
org.apache.commons.math3.fraction.Fraction.multiply(org.apache.commons.math3.fraction.Fraction) throws org.apache.commons.math3.exception.NullArgumentException if the fraction is null ==> [args[0]==null]
org.apache.commons.math3.fraction.Fraction.multiply(org.apache.commons.math3.fraction.Fraction) throws org.apache.commons.math3.exception.MathArithmeticException if the resulting numerator or denominator exceeds Integer.MAX_VALUE ==> []
org.apache.commons.math3.fraction.Fraction.multiply(org.apache.commons.math3.fraction.Fraction) throws org.apache.commons.math3.exception.NullArgumentException if a is null. ==> [target.abs()==null]
org.apache.commons.math3.fraction.Fraction.divide(org.apache.commons.math3.fraction.Fraction) throws java.lang.IllegalArgumentException if the fraction is null ==> [args[0]==null]
org.apache.commons.math3.fraction.Fraction.divide(org.apache.commons.math3.fraction.Fraction) throws org.apache.commons.math3.exception.MathArithmeticException if the fraction to divide by is zero ==> [args[0]==(org.apache.commons.math3.fraction.BigFraction.ZERO)]
org.apache.commons.math3.fraction.Fraction.divide(org.apache.commons.math3.fraction.Fraction) throws org.apache.commons.math3.exception.MathArithmeticException if the resulting numerator or denominator exceeds Integer.MAX_VALUE ==> []
org.apache.commons.math3.fraction.Fraction.divide(org.apache.commons.math3.fraction.Fraction) throws org.apache.commons.math3.exception.NullArgumentException if a is null. ==> [target.abs()==null]
org.apache.commons.math3.fraction.Fraction.divide(org.apache.commons.math3.fraction.Fraction) throws org.apache.commons.math3.exception.MathArithmeticException if a is zero ==> [target.abs()==0]
org.apache.commons.math3.fraction.Fraction.getReducedFraction(int, int) throws org.apache.commons.math3.exception.MathArithmeticException if the denominator is zero ==> [args[1]==0]
