org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator.interpolate(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException if the array lengths are different. ==> [args[0].length!=args[1].length]
org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator.interpolate(double[], double[]) throws org.apache.commons.math3.exception.NumberIsTooSmallException if the number of points is less than 2. ==> [args[0].length<2]
org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator.interpolate(double[], double[]) throws org.apache.commons.math3.exception.NonMonotonicSequenceException if x is not sorted in strictly increasing order. ==> []
org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator.interpolate(double[], double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException if the arguments violate assumptions made by the interpolation algorithm. ==> []
org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator.interpolate(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException if arrays lengthes do not match ==> [args[0].length!=args[1].length]
org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator.computeDividedDifference(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException if the array lengths are different. ==> [args[0].length!=args[1].length]
org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator.computeDividedDifference(double[], double[]) throws org.apache.commons.math3.exception.NumberIsTooSmallException if the number of points is less than 2. ==> [args[0].length<2]
org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator.computeDividedDifference(double[], double[]) throws org.apache.commons.math3.exception.NonMonotonicSequenceException if x is not sorted in strictly increasing order. ==> []
