org.apache.commons.math3.random.RandomDataGenerator.nextHexString(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException if len <= 0. ==> [args[0]<=0]
org.apache.commons.math3.random.RandomDataGenerator.nextHexString(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException if len <= 0 ==> [args[0]<=0]
org.apache.commons.math3.random.RandomDataGenerator.nextInt(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException if lower >= upper ==> [args[0]>=args[1]]
org.apache.commons.math3.random.RandomDataGenerator.nextLong(long, long) throws org.apache.commons.math3.exception.NumberIsTooLargeException if lower >= upper ==> [args[0]>=args[1]]
org.apache.commons.math3.random.RandomDataGenerator.nextSecureHexString(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException if len <= 0 ==> [args[0]<=0]
org.apache.commons.math3.random.RandomDataGenerator.nextSecureInt(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException if lower >= upper. ==> [args[0]>=args[1]]
org.apache.commons.math3.random.RandomDataGenerator.nextSecureLong(long, long) throws org.apache.commons.math3.exception.NumberIsTooLargeException if lower >= upper. ==> [args[0]>=args[1]]
org.apache.commons.math3.random.RandomDataGenerator.nextPoisson(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException if len <= 0 ==> [args[0]<=0]
org.apache.commons.math3.random.RandomDataGenerator.nextPoisson(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException if mean <= 0. ==> [args[0]<=0]
org.apache.commons.math3.random.RandomDataGenerator.nextGaussian(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException if sigma <= 0. ==> [args[1]<=0]
org.apache.commons.math3.random.RandomDataGenerator.nextExponential(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException if mean <= 0. ==> [args[0]<=0]
org.apache.commons.math3.random.RandomDataGenerator.nextGamma(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException if shape <= 0 or scale <= 0. ==> [args[0]<=0||args[1]<=0]
org.apache.commons.math3.random.RandomDataGenerator.nextHypergeometric(int, int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException if numberOfSuccesses > populationSize, or sampleSize > populationSize. ==> [args[1]>args[0]||args[2]>args[0]]
org.apache.commons.math3.random.RandomDataGenerator.nextHypergeometric(int, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException if populationSize <= 0. ==> [args[0]<=0]
org.apache.commons.math3.random.RandomDataGenerator.nextHypergeometric(int, int, int) throws org.apache.commons.math3.exception.NotPositiveException if numberOfSuccesses < 0. ==> [args[1]<0]
org.apache.commons.math3.random.RandomDataGenerator.nextPascal(int, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException if the number of successes is not positive ==> [(args[0]>0)==false]
org.apache.commons.math3.random.RandomDataGenerator.nextPascal(int, double) throws org.apache.commons.math3.exception.OutOfRangeException if the probability of success is not in the range [0, 1]. ==> [args[1]>=0&&args[1]<=1]
org.apache.commons.math3.random.RandomDataGenerator.nextT(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException if df <= 0 ==> [args[0]<=0]
org.apache.commons.math3.random.RandomDataGenerator.nextWeibull(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException if shape <= 0 or scale <= 0. ==> [args[0]<=0||args[1]<=0]
org.apache.commons.math3.random.RandomDataGenerator.nextZipf(int, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException if numberOfElements <= 0 or exponent <= 0. ==> [args[0]<=0||args[1]<=0]
org.apache.commons.math3.random.RandomDataGenerator.nextF(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException if numeratorDf <= 0 or denominatorDf <= 0. ==> [args[0]<=0||args[1]<=0]
org.apache.commons.math3.random.RandomDataGenerator.nextUniform(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException if lower >= upper ==> [args[0]>=args[1]]
org.apache.commons.math3.random.RandomDataGenerator.nextUniform(double, double) throws org.apache.commons.math3.exception.NotFiniteNumberException if one of the bounds is infinite ==> []
org.apache.commons.math3.random.RandomDataGenerator.nextUniform(double, double) throws org.apache.commons.math3.exception.NotANumberException if one of the bounds is NaN ==> []
org.apache.commons.math3.random.RandomDataGenerator.nextUniform(double, double, boolean) throws org.apache.commons.math3.exception.NumberIsTooLargeException if lower >= upper ==> [args[0]>=args[1]]
org.apache.commons.math3.random.RandomDataGenerator.nextUniform(double, double, boolean) throws org.apache.commons.math3.exception.NotFiniteNumberException if one of the bounds is infinite ==> []
org.apache.commons.math3.random.RandomDataGenerator.nextUniform(double, double, boolean) throws org.apache.commons.math3.exception.NotANumberException if one of the bounds is NaN ==> []
org.apache.commons.math3.random.RandomDataGenerator.nextPermutation(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException if k > n. ==> [args[1]>args[0]]
org.apache.commons.math3.random.RandomDataGenerator.nextPermutation(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException if k <= 0. ==> [args[1]<=0]
org.apache.commons.math3.random.RandomDataGenerator.nextSample(java.util.Collection<?>, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException if k > c.size(). ==> [args[1]>args[0].size()]
org.apache.commons.math3.random.RandomDataGenerator.nextSample(java.util.Collection<?>, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException if k <= 0. ==> [args[1]<=0]
org.apache.commons.math3.random.RandomDataGenerator.setSecureAlgorithm(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException if the specified algorithm is not available ==> []
org.apache.commons.math3.random.RandomDataGenerator.setSecureAlgorithm(java.lang.String, java.lang.String) throws java.security.NoSuchProviderException if the specified provider is not installed ==> []
