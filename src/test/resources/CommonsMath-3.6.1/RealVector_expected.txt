org.apache.commons.math3.linear.RealVector.getEntry(int) throws org.apache.commons.math3.exception.OutOfRangeException if the index is not valid. ==> []
org.apache.commons.math3.linear.RealVector.setEntry(int, double) throws org.apache.commons.math3.exception.OutOfRangeException if the index is not valid. ==> []
org.apache.commons.math3.linear.RealVector.addToEntry(int, double) throws org.apache.commons.math3.exception.OutOfRangeException if the index is not valid. ==> []
org.apache.commons.math3.linear.RealVector.getSubVector(int, int) throws org.apache.commons.math3.exception.OutOfRangeException if the index is not valid. ==> []
org.apache.commons.math3.linear.RealVector.getSubVector(int, int) throws org.apache.commons.math3.exception.NotPositiveException if the number of elements is not positive. ==> [(args[1]>0)==false]
org.apache.commons.math3.linear.RealVector.setSubVector(int, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.OutOfRangeException if the index is not valid. ==> []
org.apache.commons.math3.linear.RealVector.checkVectorDimensions(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException if the vectors do not have the same dimension. ==> [target.checkVectorsDimensions(args[0])]
org.apache.commons.math3.linear.RealVector.checkVectorDimensions(int) throws org.apache.commons.math3.exception.DimensionMismatchException if the dimension is inconsistent with the vector size. ==> []
org.apache.commons.math3.linear.RealVector.checkIndex(int) throws org.apache.commons.math3.exception.OutOfRangeException if index is not valid. ==> []
org.apache.commons.math3.linear.RealVector.checkIndices(int, int) throws org.apache.commons.math3.exception.OutOfRangeException if start of end are not valid ==> []
org.apache.commons.math3.linear.RealVector.checkIndices(int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException if end < start ==> [args[1]<args[0]]
org.apache.commons.math3.linear.RealVector.add(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException if v is not the same size as this vector. ==> [target.checkVectorDimensions(args[0])]
org.apache.commons.math3.linear.RealVector.subtract(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException if v is not the same size as this vector. ==> [target.checkVectorsDimensions(args[0])]
org.apache.commons.math3.linear.RealVector.dotProduct(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException if v is not the same size as this vector. ==> [target.checkVectorDimensions(args[0])]
org.apache.commons.math3.linear.RealVector.cosine(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.MathArithmeticException if this or v is the null vector ==> [target.getNorm()==0||args[0].getNorm()==0]
org.apache.commons.math3.linear.RealVector.cosine(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException if the dimensions of this and v do not match ==> [target.getDimension()!=args[0].getDimension()]
org.apache.commons.math3.linear.RealVector.ebeDivide(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException if v is not the same size as this vector. ==> [args[0].getDimension()!=target.getDimension()]
org.apache.commons.math3.linear.RealVector.ebeMultiply(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException if v is not the same size as this vector. ==> [args[0].getDimension()!=target.getDimension()]
org.apache.commons.math3.linear.RealVector.getDistance(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException if v is not the same size as this vector. ==> [args[0].getDimension()!=target.getDimension()]
org.apache.commons.math3.linear.RealVector.getL1Distance(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException if v is not the same size as this vector. ==> [args[0].getDimension()!=target.getDimension()]
org.apache.commons.math3.linear.RealVector.getLInfDistance(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException if v is not the same size as this vector. ==> [args[0].getDimension()!=target.getDimension()]
org.apache.commons.math3.linear.RealVector.projection(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException if v is not the same size as this vector. ==> [args[0].getDimension()!=target.getDimension()]
org.apache.commons.math3.linear.RealVector.projection(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.MathArithmeticException if this or v is the null vector ==> [target.getNorm()==0||args[0].getNorm()==0]
org.apache.commons.math3.linear.RealVector.unitVector() throws org.apache.commons.math3.exception.MathArithmeticException if the norm is zero. ==> [target.getNorm()==0]
org.apache.commons.math3.linear.RealVector.unitize() throws org.apache.commons.math3.exception.MathArithmeticException if the norm is zero. ==> [target.getNorm()==0]
org.apache.commons.math3.linear.RealVector.combine(double, double, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException if y is not the same size as this vector. ==> [args[2].getDimension()!=target.getDimension()]
org.apache.commons.math3.linear.RealVector.combineToSelf(double, double, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException if y is not the same size as this vector. ==> [args[2].getDimension()!=target.getDimension()]
org.apache.commons.math3.linear.RealVector.walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException if end < start. ==> [args[2]<args[1]]
org.apache.commons.math3.linear.RealVector.walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor, int, int) throws org.apache.commons.math3.exception.OutOfRangeException if the indices are not valid. ==> []
org.apache.commons.math3.linear.RealVector.walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException if end < start. ==> [args[2]<args[1]]
org.apache.commons.math3.linear.RealVector.walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor, int, int) throws org.apache.commons.math3.exception.OutOfRangeException if the indices are not valid. ==> []
org.apache.commons.math3.linear.RealVector.walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException if end < start. ==> [args[2]<args[1]]
org.apache.commons.math3.linear.RealVector.walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor, int, int) throws org.apache.commons.math3.exception.OutOfRangeException if the indices are not valid. ==> []
org.apache.commons.math3.linear.RealVector.walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException if end < start. ==> [args[2]<args[1]]
org.apache.commons.math3.linear.RealVector.walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor, int, int) throws org.apache.commons.math3.exception.OutOfRangeException if the indices are not valid. ==> []
org.apache.commons.math3.linear.RealVector.equals(java.lang.Object) throws org.apache.commons.math3.exception.MathUnsupportedOperationException if this method is not overridden. ==> []
org.apache.commons.math3.linear.RealVector.hashCode() throws org.apache.commons.math3.exception.MathUnsupportedOperationException if this method is not overridden. ==> []
